import numpy as np
import pandas as pd
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class 社保智能体:
    """社会保障智能体类，负责模拟社会保障体系变化"""
    
    def __init__(self, 初始数据: Dict[str, Any]):
        """初始化社会保障智能体
        
        Args:
            初始数据: 包含初始社保数据的字典
        """
        self.状态 = {
            '参保人数': 初始数据.get('参保人数', 70000),  # 万人
            '缴费率': 初始数据.get('缴费率', 0.28),  # 总缴费率（包括养老、医疗等）
            '基金结余': 初始数据.get('基金结余', 100000),  # 亿元
            '社保收入': 初始数据.get('社保收入', 50000),  # 亿元/年
            '社保支出': 初始数据.get('社保支出', 45000),  # 亿元/年
            '人均待遇': 初始数据.get('人均待遇', 3.5),  # 万元/人/年
            '基金收益率': 初始数据.get('基金收益率', 0.03)  # 基金投资收益率
        }
    
    def 获取状态(self) -> Dict[str, Any]:
        """获取当前状态
        
        Returns:
            包含当前状态的字典
        """
        return self.状态.copy()
    
    def 更新状态(self, GDP: float, 人口数据: Dict[str, Any],
               经济数据: Dict[str, Any]) -> Dict[str, Any]:
        """更新社会保障状态
        
        Args:
            GDP: 国内生产总值（亿元）
            人口数据: 包含人口相关数据的字典
            经济数据: 包含经济相关数据的字典
            
        Returns:
            更新后的状态字典
        """
        try:
            # 1. 计算参保人数变化
            目标参保率 = 0.95  # 最终目标是95%的劳动年龄人口参保
            当前参保率 = self.状态['参保人数'] / 人口数据['劳动年龄人口']
            参保率增长 = min(0.02, (目标参保率 - 当前参保率) * 0.1)  # 渐进式增长
            新参保人数 = self.状态['参保人数'] * (1 + 参保率增长)
            
            # 2. 计算缴费基数和缴费收入
            人均工资 = GDP / 人口数据['劳动年龄人口'] * 0.6  # 假设工资占GDP的60%
            缴费基数 = 人均工资 * 新参保人数
            缴费收入 = 缴费基数 * self.状态['缴费率']
            
            # 3. 计算基金投资收益
            投资收益 = self.状态['基金结余'] * self.状态['基金收益率']
            
            # 4. 计算社保支出
            退休人口 = 人口数据['老年人口']
            新人均待遇 = self.状态['人均待遇'] * (1 + 经济数据['消费率'] * 0.1)
            社保支出 = 退休人口 * 新人均待遇
            
            # 5. 计算基金结余变化
            新基金结余 = (self.状态['基金结余'] + 
                         缴费收入 + 投资收益 - 社保支出)
            
            # 6. 调整缴费率
            if 新基金结余 < 0:
                新缴费率 = min(0.35, self.状态['缴费率'] * 1.05)  # 最高上调到35%
            elif 新基金结余 > GDP * 0.1:  # 如果结余超过GDP的10%
                新缴费率 = max(0.2, self.状态['缴费率'] * 0.95)  # 最低下调到20%
            else:
                新缴费率 = self.状态['缴费率']
            
            # 7. 更新状态
            新状态 = {
                '参保人数': 新参保人数,
                '缴费率': 新缴费率,
                '基金结余': 新基金结余,
                '社保收入': 缴费收入 + 投资收益,
                '社保支出': 社保支出,
                '人均待遇': 新人均待遇,
                '基金收益率': self.状态['基金收益率']
            }
            
            self.状态 = 新状态
            return 新状态
            
        except Exception as e:
            logger.error(f"更新社保状态时出错: {str(e)}")
            raise 